{"version":3,"sources":["config.js","Home.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","moviesList","topRatedMovies","config","axios","get","then","response","result","data","results","setState","console","log","movieImage","this","map","movie","index","className","key","to","id","src","poster_path","Component","Movie","mid","props","match","params","movieId","singleMovieUrl","undefined","title","imageUrl","budget","tagline","overview","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAAe,EACH,mCCiDGA,E,kDAxCX,aAAe,IAAD,8BACV,gBACKC,MAAO,CACRC,WAAa,IAHP,E,gEAOM,IAAD,OACTC,EAAc,+DAA2DC,GAE/EC,IAAMC,IAAIH,GAAgBI,MAAK,SAACC,GAC5B,IAAMC,EAASD,EAASE,KAAKC,QAC7B,EAAKC,SAAS,CACVV,WAAaO,IAEjBI,QAAQC,IAAI,eACZD,QAAQC,IAAIL,Q,+BAMhB,IACMM,EAAaC,KAAKf,MAAMC,WAAWe,KAAI,SAACC,EAAOC,GACjD,OACI,yBAAKC,UAAU,SAASC,IAAKF,GACzB,kBAAC,IAAD,CAAMG,GAAE,iBAAYJ,EAAMK,KACtB,yBAAKC,IAAG,UALP,kCAKO,OAAgBN,EAAMO,oBAK9C,OACI,yBAAKL,UAAU,OACVL,O,GApCEW,aC2CJC,E,kDA9CX,aAAc,IAAD,8BACT,gBACK1B,MAAQ,CACTiB,MAAO,IAHF,E,gEAOO,IAAD,OACTU,EAAMZ,KAAKa,MAAMC,MAAMC,OAAOC,QAC9BC,EAAc,6CAAyCL,EAAzC,oBAAwDxB,GAC5EC,IAAMC,IAAI2B,GAAgB1B,MAAK,SAACC,GAC5BK,QAAQC,IAAIN,EAASE,MACrB,EAAKE,SAAS,CACVM,MAAOV,EAASE,UAGxBG,QAAQC,IAAI,kCAEZD,QAAQC,IAAIE,KAAKf,MAAMiB,S,+BAMvB,GAFAL,QAAQC,IAAI,mCACZD,QAAQC,IAAIE,KAAKa,MAAMC,YACOI,IAA3BlB,KAAKf,MAAMiB,MAAMiB,MAChB,OAAQ,0CAEZ,IAAMjB,EAAQF,KAAKf,MAAMiB,MACnBkB,EAAQ,wCAAoClB,EAAMO,aAMxD,OAJAZ,QAAQC,IAAI,0CACZD,QAAQC,IAAII,GACZL,QAAQC,IAAIsB,GAGR,6BACI,yBAAKZ,IAAKY,IACV,2BAAIlB,EAAMiB,OACV,sCAAYjB,EAAMmB,QAClB,uCAAanB,EAAMoB,SACnB,wCAAcpB,EAAMqB,e,GAzChBb,aCkBLc,MAbf,WAEE,OACE,kBAAC,IAAD,KACE,yBAAKpB,UAAU,OACb,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,kBAAkBC,UAAWhB,OCHnCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.cc98a8fb.chunk.js","sourcesContent":["export default {\n    api_key:'0818fc92ed448c10d4cd043a4a94e9f0'\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport config from './config';\n\nimport { \n    Link\n  } from \"react-router-dom\";\n\nclass Home extends Component {\n\n    constructor() {\n        super();\n        this.state= {\n            moviesList : []\n        }\n    }\n    \n    componentDidMount(){\n        const topRatedMovies = `https://api.themoviedb.org/3/movie/top_rated?api_key=${config.api_key}`;\n\n        axios.get(topRatedMovies).then((response) => {\n            const result = response.data.results;\n            this.setState({\n                moviesList : result\n            })\n            console.log('Inside Home');\n            console.log(result);\n        })\n        \n    }\n\n    render(){\n        const imageUrl = \"http://image.tmdb.org/t/p/w300\";\n        const movieImage = this.state.moviesList.map((movie, index) => {\n            return (\n                <div className=\"col s3\" key={index}>\n                    <Link to={`/movie/${movie.id}`}>\n                        <img src={`${imageUrl}${movie.poster_path}`} />\n                    </Link>\n                </div>\n            )\n        })\n        return (\n            <div className='row'>\n                {movieImage}\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport config from './config';\nimport axios from 'axios';\n\nclass Movie extends Component{\n    constructor(){\n        super();\n        this.state = {\n            movie: {}\n        }\n    }\n\n    componentDidMount(){\n        const mid = this.props.match.params.movieId\n        const singleMovieUrl = `https://api.themoviedb.org/3/movie/${mid}?api_key=${config.api_key}`\n        axios.get(singleMovieUrl).then((response)=>{\n            console.log(response.data);\n            this.setState({\n                movie: response.data\n            })\n        })\n        console.log('Inside Movie ComponentdidMount');\n\n        console.log(this.state.movie);\n    }\n\n    render(){\n        console.log('Inside Movie render props match');\n        console.log(this.props.match)\n        if(this.state.movie.title === undefined){\n            return (<h1>Loading...</h1>)\n        }\n        const movie = this.state.movie;\n        const imageUrl = `http://image.tmdb.org/t/p/w300${movie.poster_path}`;\n\n        console.log('Inside Movie render movie and imageURL');\n        console.log(movie);\n        console.log(imageUrl);\n\n        return(\n            <div>\n                <img src={imageUrl} />\n                <p>{movie.title}</p>\n                <p>Budget: {movie.budget}</p>\n                <p>Tagline: {movie.tagline}</p>\n                <p>Overview: {movie.overview}</p>\n            </div>\n        )\n    }\n}\n\nexport default Movie;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './Home';\nimport Movie from './Movie';\n\nfunction App() {\n  //  {/* :movieId represents the params value  */}\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route exact path='/' component={Home} />\n        <Route exact path='/movie/:movieId' component={Movie}/>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}